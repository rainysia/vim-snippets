snippet <?
	<?php

	${0}
snippet ec
	echo ${0};
snippet <?e
	<?php echo ${0} ?>
# this one is for php5.4
snippet <?=
	<?=${0}?>
snippet ?=
	<?= ${0} ?>
snippet ?
	<?php ${0} ?>
snippet ?f
	<?php foreach ($${1:vars} as $${2:$var}): ?>
		${0}
	<?php endforeach ?>
snippet ?i
	<?php if ($${1:var}): ?>
		${0}
	<?php endif ?>
snippet ns
	namespace ${1:Foo\Bar\Baz};
	${0}
snippet use
	use ${1:Foo\Bar\Baz};
	${0}
snippet	c
	class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
snippet i
	interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
snippet t.
	$this->
snippet f
	function ${1}(${3})
	{
		${0}
	}
# method
snippet m
	${1:protected} function ${2:foo}()
	{
		${0}
	}
# setter method
snippet sm
	/**
	 * Sets the value of ${1:foo}
	 *
	 * @param ${2:$1} $$1 ${3:description}
	 *
	 * @return ${4:`vim_snippets#Filename()`}
	 */
	${5:public} function set${6:$2}(${7:$2 }$$1)
	{
		$this->${8:$1} = $$1;
		return $this;
	}
# getter method
snippet gm
	/**
	 * Gets the value of ${1:foo}
	 *
	 * @return ${2:$1}
	 */
	${3:public} function get${4:$2}()
	{
		return $this->${5:$1};
	}
#setter
snippet $s
	${1:$foo}->set${2:Bar}(${0});
#getter
snippet $g
	${1:$foo}->get${0:Bar}();

# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet =?:
	$${1:foo} = ${2:true} ? ${3:a} : ${0};
snippet ?:
	${1:true} ? ${2:a} : ${0}

snippet C
	$_COOKIE['${1:variable}']
snippet E
	$_ENV['${1:variable}']
snippet F
	$_FILES['${1:variable}']
snippet G
	$_GET['${1:variable}']
snippet P
	$_POST['${1:variable}']
snippet R
	$_REQUEST['${1:variable}']
snippet S
	$_SERVER['${1:variable}']
snippet SS
	$_SESSION['${1:variable}']

# the following are old ones
snippet inc
	include '${1:file}';
snippet inc1
	include_once '${1:file}';
snippet req
	require '${1:file}';
snippet req1
	require_once '${1:file}';
# Start Docblock
snippet /*
	/**
	 * ${0}
	 */
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @subpackage ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 */
# Class Variable
snippet doc_
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 */
	${1:var} $${2};
# Class
snippet doc_c
	/**
	 * ${1:Default.Class.Description.}
	 *
	 * @category ${2:}
	 * @package  ${3:}
	 * @author   ${4:`g:snips_author` <`g:snips_email`>}
	 * @license  ${5:`g:snips_license`}
	 * @link     ${6:`g:snips_link`}
	 *
	 */
	class ${7:ClassName}
	{

	}
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 */
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 */
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3});
# Function
snippet doc_f
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
	${2}function ${2}(${3})
	{
		${7}
	}
snippet doc_pf
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
	public ${2}function ${2}(${3})
	{
		${7}
	}
# Header
snippet doc_h
	/**
	 * ${1:ClassName}
	 *
	 * ${2:`g:snips_php_version`}
	 * 
	 * @category   ${2:ClassName}
	 * @package    ${2:Main}
	 * @subpackage ${3:Child}
	 * @author     ${4:`g:snips_author`}
	 * @copyright  ${5:`g:snips_copyright`}
	 * @license    ${6:`g:snips_license`}
	 * @createTime ${7:`strftime('%Y-%m-%d %H:%M:%S %A')`}
	 * @lastTime   ${8:`strftime('%Y-%m-%d %H:%M:%S %A')`}
	 *
	 * @link       ${9:`g:snips_link`}
	 */

# Interface
snippet interface
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
	interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
# Trait
snippet trait
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
	trait ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
# class ...
snippet class
	/**
	 * ${1}
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		${3}
		/**
		 * ${4}
		 */
		${5:public} function ${6:__construct}(${7:argument})
		{
			${0}
		}
	}
snippet nc
	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	${2:abstract }class ${3:`vim_snippets#Filename()`}
	{
		${0}
	}
# define(...)
snippet define
	define('${1}', '${2}');${3}
snippet def
	define('${1}'${2});
# defined(...)
snippet def?
	${1}defined('${2}')
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# do ... while
snippet do
	do {
		${2:}
	} while (${1:});
snippet if
	if (${1:}) {
		${2:}
	}
snippet ifn
	if (!${1:/* condition */}) {
		${2}
	}
snippet ifil
	<?php if (${1:/* condition */}): ?>
		${0}
	<?php endif; ?>
snippet ife
	if (${1:}) {
		${2:}
	} else {
		${3:}
	}
	${4}
snippet ifeil
	<?php if (${1:/* condition */}): ?>
		${2:<!-- html... -->}
	<?php else: ?>
		${3:<!-- html... -->}
	<?php endif; ?>
	${0}
snippet ifthrow
	if(! ${1:}){
		throw new Exception("");
	}
snippet el
	else {
		${0}
	}
snippet eif
	elseif (${1}) {
		${0}
	}
snippet switch
	switch ($${1:}) {
	case '${2:}':
		${3:}
		break;
		${5:}
	default:
		${4:}
		break;
	}
snippet case
	case '${1:}':
		${2:}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:}
	}
snippet foreach
	foreach ($${1:} as $${2:}) {
		${3:}
	}
snippet foreachv
	foreach ($${1:} as $${2:} => $${3:}) {
		${4:}
	}
snippet function
	function ${1:}(${2:}){
		${3:}
	}
snippet func
	function ${1:}(${2:}){
		${3:}
	}
snippet foreachil
	<?php foreach ($${1:variable} as $${2:value}): ?>
		${0:<!-- html... -->}
	<?php endforeach; ?>
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${0}
	}
snippet foreachkil
	<?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>
		${0:<!-- html... -->}
	<?php endforeach; ?>
# $... = array (...)
snippet array b
	$${1:arrayName} = array('${2}' => ${3});
snippet try
	try {
		${1:}
	} catch ( Exception $e) {
		die(${2:});
	}
# lambda with closure
snippet lambda
	${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
		${0}
	};
# pre_dump();
snippet pd
	echo '<pre>'; var_dump(${0}); echo '</pre>';
# pre_dump(); die();
snippet pdd
	echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${0:});
snippet vd
	var_dump(${0});
snippet vdd
	var_dump(${1}); die(${0:});
snippet pr
	print_r(${0});
snippet prs
	print_r(${0}, 1);
snippet vdf
	error_log(print_r($${1:foo}, true), 3, '${2:/tmp/debug.log}');
snippet http_redirect
	header ("HTTP/1.1 301 Moved Permanently");
	header ("Location: ".URL);
	exit();
# Getters & Setters
snippet gs
	/**
	 * Gets the value of ${1:foo}
	 *
	 * @return ${2:$1}
	 */
	public function get${3:$2}()
	{
		return $this->${4:$1};
	}

	/**
	 * Sets the value of $1
	 *
	 * @param $2 $$1 ${5:description}
	 *
	 * @return ${6:`vim_snippets#Filename()`}
	 */
	public function set$3(${7:$2 }$$1)
	{
		$this->$4 = $$1;
		return $this;
	}
# anotation, get, and set, useful for doctrine
snippet ags
	/**
	 * ${1:description}
	 *
	 * @${0}
	 */
	${2:protected} $${3:foo};

	public function get${4:$3}()
	{
		return $this->$3;
	}

	public function set$4(${5:$4 }$${6:$3})
	{
		$this->$3 = $$6;
		return $this;
	}
snippet rett
	return true;
snippet retf
	return false;
snippet am
	$${1:foo} = array_map(function($${2:v}) {
		${0}
		return $$2;
	}, $$1);
snippet aw
	array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {
		$$2 = ${0};
	});

# static var assign once
snippet static_var
	static $${1} = null;
	if (is_null($$1)){
		$$1 = ${2};
	}

snippet CSVWriter
	<?php
	
	class CSVWriter {
		public function __construct($file_or_handle, $sep = "\t", $quot = '"'){
			$args = func_get_args();
			$mode = isset($opts['mode']) ? $opts['mode'] : 'w';
	
			$this->f =
				is_string($file_or_handle)
				? fopen($file_or_handle, $mode)
				: $file_or_handle;
	
			$this->fputcsv_args = array($this->f, null, $sep, $quot);
	
			if (!$this->f) throw new Exception('bad file descriptor');
		}
	
		public function write($row){
			$this->fputcsv_args[1] =& $row;
			call_user_func_array('fputcsv', $this->fputcsv_args);
		}
	
		public function close(){
			if (!is_null($this->f))
				fclose($this->f);
			$this->f = null;
		}
	
		public function __destruct(){
			$this->close();
		}
	
	}

snippet CSVIterator
	
	// http://snipplr.com/view.php?codeview&id=1986 // modified
	class CSVIterator implements Iterator
	{	
		private $f;
		private $curr;
		private $rowCounter;
	
		 /* opts keys:
			* row_size
			* escape
			* enclosure
			* delimiter
			*/
		public function __construct( $file_or_handle, $opts = array(4096, ',') )
		{
			$d = function($n) use(&$opts){ return isset($opts[$n]) ? $opts[$n] : false; };
	
			$this->combine = $d('combine');
			$this->headers = $d('headers');
			$this->headerCheckFunction = $d('header_check_function');
	
			$this->f =
				is_string($file_or_handle)
				? fopen( $file_or_handle, 'r' )
				: $file_or_handle;
			if (!$this->f) throw new Exception('bad file descriptor');
			$this->fgetcsv_args = array(
					$this->f,
					isset($opts['row_size']) ? $opts['row_size'] : 4096,
					isset($opts['delimiter']) ? $opts['delimiter'] : ',',
					isset($opts['enclosure']) ? $opts['enclosure'] : '"',
					isset($opts['escape']) ? $opts['escape'] : '\\',
			);
			$this->start();
		}
	
		protected function readRow(){
			$this->curr = call_user_func_array('fgetcsv', $this->fgetcsv_args );
			$this->rowCounter++;
			if ($this->rowCounter == 1){
				$this->processHeader();
			} elseif ($this->curr) {
				$this->processRow();
			}
		}
	
		public function processHeader(){
			if ($this->headers || $this->combine){
				$this->header = $this->curr;
				if ($this->headerCheckFunction){
					$f = $this->headerCheckFunction;
					$f($this->header);
				}
				$this->readRow();
			}
		}
	
		public function processRow(){
			if ($this->combine)
				$this->curr = array_combine($this->header, $this->curr);
		}
	
		public function start(){
			$this->rowCounter = 0;
			rewind( $this->f );
			$this->readRow();
		}
	
		public function rewind()
		{
			$this->start();
		}
	
		public function current()
		{
			$curr = $this->curr;
			$this->readRow();
			return $curr;
		}
	
		public function key()
		{
			return $this->rowCounter;
		}
	
		public function next()
		{
			return $this->curr;
		}
	
		public function valid(){
			if( !$this->next() )
			{
				fclose( $this->f );
				return FALSE;
			}
			return TRUE;
		}
	
	} // end class

snippet is
	isset($1{VISUAL})

# phpunit	
snippet ase
	$this->assertEquals(${1:expected}, ${2:actual});

snippet asne
	$this->assertNotEquals(${1:expected}, ${2:actual});

snippet asf
	$this->assertFalse(${1:Something});

snippet ast
	$this->assertTrue(${1:Something});

snippet asfex
	$this->assertFileExists(${1:path/to/file});

snippet asfnex
	$this->assertFileNotExists(${1:path/to/file});

snippet ascon
	$this->assertContains(${1:Search Value}, ${2:Array or Iterator});

snippet ashk
	$this->assertArrayHasKey(${1:key}, ${2:array});

snippet asnhk
	this->assertArrayNotHasKey(${1:value}, ${2:array});

snippet ascha
	$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');

snippet asi
	$this->assertInstanceOf(${1:expected}, ${2:actual});

snippet tc
	public function test${1:name_of_the_test}()
	{
		${0:code}
	}
snippet te 
	throw new ${1:Exception}("${2:Error Processing Request}");

snippet fpc "file_put_contents" b
	file_put_contents(${1:file}, ${2:content}${3:, FILE_APPEND});$0

snippet sr "str_replace"
	str_replace(${1:search}, ${2:replace}, ${3:subject})$0

snippet ia "in_array"
	in_array(${1:needle}, ${2:haystack})$0

snippet is "isset"
	isset(${1:var})$0

snippet isa "isset array"
	isset($${1:array}[${2:key}])$0

snippet in "is_null"
	is_null($${1:var})$0

snippet fe "file_exists"
	file_exists(${1:file})$0

snippet id "is_dir"
	is_dir(${1:path})$0


### selfdefine
snippet php
	<?php
	${1}
snippet phpw
	<?php ${1}?>
snippet echo
	echo ${1:string}${2};
snippet echop
	echo '<pre>';
	 ${1:}
	echo '</pre>';
snippet echopvd
	echo '<pre>';
	var_dump(${1:});
	echo '</pre>';
snippet echoppr
	echo '<pre>';
	print_r (${1:});
	echo '</pre>';
snippet echopprex
	echo '<pre>';
	print_r (${1:});
	echo '</pre>';exit;
snippet echopvdex
	echo '<pre>';
	var_dump(${1:});
	echo '</pre>';exit;
snippet echopvdaex
	echo '<pre>';
	var_dump(array('${1:}' => ));
	echo '</pre>';exit;
snippet echopvpex
	echo '<pre>';
	var_export(array('${1:}' => ), 1);
	echo '</pre>';exit;
snippet elvp
	error_log(var_export(array('${1:}' => ${2}), 1)."\n", 3, "/var/log/php_errors.log");
snippet elvp1
	error_log("#${1:}#"."\n", 3, "/var/log/php_errors.log");
snippet elvpt
	error_log("#".date('Y-m-d H:i:s')."#"."\n", 3, "/var/log/php_errors.log");
	error_log(var_export(array('${1:}' => ${2}), 1)."\n", 3, "/var/log/php_errors.log");
snippet echoh
	echo ${1:string}.'<hr />';
snippet echob
	echo ${1:string}.'<br />';
snippet echo1b
	echo '##111##'.'<br />';
snippet echo2b
	echo '##222##'.'<br />';
snippet echo3b
	echo '##333##'.'<br />';
snippet echo4b
	echo '##444##'.'<br />';
snippet echoex
	echo ${1:string}${2};exit;
snippet $
	$${1:string} = "${2:}";
snippet print
	print (${1:string});
snippet printr
	print_r (${1:string});
snippet vd
	var_dump(${1:});
snippet vdx
	var_dump(${1:});exit;
snippet vda
	var_dump(array('' => ));
snippet include
	include ${1:file};${2}
snippet include1
	include_once ${1:file};${2}
snippet require
	require ${1:file};${2}
snippet require1
	require_once ${1:file};${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet cookie
	$_COOKIE['${1:variable}']${2}
snippet env
	$_ENV['${1:variable}']${2}
snippet files
	$_FILES['${1:variable}']${2}
snippet get
	$_GET['${1:variable}']${2}
snippet post
	$_POST['${1:variable}']${2}
snippet request
	$_REQUEST['${1:variable}']${2}
snippet server
	$_SERVER['${1:variable}']${2}
snippet session
	$_SESSION['${1:variable}']${2}
snippet exit
	exit(${1:string});
snippet thrownew
	throw new ${1}
snippet thrownewi
	throw new InvalidArgumentException(${1});
snippet invalid
	InvalidArgumentException
snippet publicft
	public function testException(){

	}

snippet tryif
	try{
		${1}
	}

	catch (InvalidArgumentException $expected) {
		return;${2}
	}

	$this->fail('${3}');
snippet ex
	exception
snippet thissee
	$this->setExpectedException('${1}');
snippet publicftf
	public function testFailingInclude(){
		include '${1}';
	}
snippet extends
	class ${1:Child} extends ${2:}
	{
		${3:}
	}
snippet clone
	clone $${1:};
snippet static
	static $${1:};
snippet const
	const ${1:};
snippet public
	public $${1:};
snippet private
	private $${1:};
snippet protected
	protected $${1:};
snippet staticpub
	public static $${1:};
snippet staticpri
	private static $${1:};
snippet staticpro
	protect static $${1:};
snippet staticf
	static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticpubf
	public static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticprif
	private static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticprof
	protected static function ${1:}(${2:})
	{
		${3:}
	}
snippet publicf
	public function ${1:}(${2:})
	{
		${3:}
	}
snippet privatef
	private function ${1:}(${2:})
	{
		${3:}
	}
snippet protectedf
	protected function ${1:}(${2:})
	{
		${3:}
	}
snippet constructf
	function __construct(${1:})
	{
		${2:}
	}
snippet destructf
	function __destruct(${1:})
	{
		${2:}
	}
snippet clonef
	function __clone(${1:})
	{
		${2:}
	}
snippet getf
	function __get($${1:})
	{
		${2:}
	}
snippet issetf
	function __isset(${1:})
	{
		${2:}
	}
snippet setf
	function __set($${1:name},$${2:value})
	{
		${3:}
	}
snippet unsetf
	function __unset($${1:name})
	{
		${2:}
	}
snippet callf
	function __call($${1:method_name},$${2:parameters})
	{
		${3:}
	}
snippet sleepf
	function __sleep()
	{
		${1:}
		return ${2:}
	}
snippet wakeupf
	function __wakeup()
	{
		${1:}
	}
snippet tostringf
	function __toString()
	{
		${1:}
	}
snippet autoloadf
	function __autoload(${1:class_name})
	{
		${1:}
	}
snippet parent
	parent::${1:}(${2:});
snippet self
	self::${1:}(${2:});
snippet abstract
	abstract class ${1:}{
		abstract function ${2:abstract_method}(${3:}){
			${4:}
		}
	}
snippet finalf
	final function ${1:}
	{
		${2:}
	}
snippet finalc
	final class ${1:}
	{
		${2:}
	}
snippet implements
	class ${1:} implements ${2:}
	{
		${2:}
	}
snippet new
	$${1:} = new ${2:}();
snippet else
	else {
		${1:}
	}
snippet elseif
	elseif (${1:}) {
		${2:}
	}
# $... = array (...)
snippet array
	$${1:} = array('${2}' => ${3});${4}
snippet this
	$this->${1:}
# phpunit
snippet ase
	$this->assertEquals(${1:expected}, ${2:actual});

snippet asne
	$this->assertNotEquals(${1:expected}, ${2:actual});

snippet asf
	$this->assertFalse(${1:Something});

snippet ast
	$this->assertTrue(${1:Something});

snippet asfex
	$this->assertFileExists(${1:path/to/file});

snippet asfnex
	$this->assertFileNotExists(${1:path/to/file});

snippet ascon
	$this->assertContains(${1:Search Value}, ${2:Array or Iterator});

snippet ashk
	$this->assertArrayHasKey(${1:key}, ${2:array});

snippet asnhk
	this->assertArrayNotHasKey(${1:value}, ${2:array});

snippet ascha
	$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');

snippet asi
	$this->assertInstanceOf(${1:expected}, ${2:actual});

snippet tc
	public function test${1:name_of_the_test}()
	{
		${0:code}
	}
snippet te 
	throw new ${1:Exception}("${2:Error Processing Request}");

snippet fpc "file_put_contents" b
	file_put_contents(${1:file}, ${2:content}${3:, FILE_APPEND});$0

snippet sr "str_replace"
	str_replace(${1:search}, ${2:replace}, ${3:subject})$0

snippet ia "in_array"
	in_array(${1:needle}, ${2:haystack})$0

snippet is "isset"
	isset(${1:var})$0

snippet isa "isset array"
	isset($${1:array}[${2:key}])$0

snippet in "is_null"
	is_null($${1:var})$0

snippet fe "file_exists"
	file_exists(${1:file})$0

snippet id "is_dir"
	is_dir(${1:path})$0
#mend detail
# 3.8.5 add jsfor                           2012-09-18 17:30:30
# 3.8.6 add jsaddLoadEvent,addAppend        2012-09-19 14:06:52
# 3.8.7 change printf to print_r ,delete '' 2012-09-29 10:07:17
# 3.9.1 add some js shortcut                2012-10-18 11:11:23
# 3.9.2 add echop                           2012-10-26 10:12:35
# 3.9.3 change switch space                 2012-12-07 13:59:41
# 3.9.4 add echoh echob                     2013-03-12 10:58:17
# 4.0.1 add echopvd echoppr                 2013-04-17 13:57:20
# 4.0.2 fix define                          2013-05-03 16:09:56
# 6.0.1 add nbs2 nbs3                       2013-06-06 15:00:28
# 6.0.2 add exit                            2013-06-24 14:48:28
# 7.0.1 add vdx,echoex,echopvdex            2013-07-18 15:32:22
#10.0.1 fix some php format                 2013-10-22 18:14:48
#10.0.2 fix some php format,add staticp*f   2013-10-23 10:52:57
#10.0.3 add phpu                            2013-10-24 16:33:26
#11.0.1 change php format                   2013-11-01 14:56:23
#11.0.2,3 change static at the end          2013-11-01 17:49:45
#11.0.4 add issetf                          2013-11-06 11:48:37
#11.0.5 fix try add space                   2013-11-07 18:13:24
#12.0.1 add echo1b echo2b ...               2013-12-19 10:30:43
#13.0.1 add echopvpex,elvp1,elvp,echopvdaex 2014-01-26 13:54:37
#13.0.2 add vda                             2014-01-26 14:19:51
#13.0.3 add echopprex                       2014-01-27 13:52:26
#14.7.1 add doc_pf                          2014-07-02 11:04:10
#14.8.1 add doc_                            2014-08-12 13:38:56
#15.1.1 add foreachv                        2015-01-09 09:55:26
#15.1.2 add new class/doc_h                 2015-01-29 13:39:27
#16.1.1 add new php                         2016-04-20 13:17:34
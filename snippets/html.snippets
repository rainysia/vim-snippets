snippet <?
	<?php

	${0}
snippet ec
	echo ${0};
snippet <?e
	<?php echo ${0} ?>
# this one is for php5.4
snippet <?=
	<?=${0}?>
snippet ?=
	<?= ${0} ?>
snippet ?
	<?php ${0} ?>
snippet ?f
	<?php foreach ($${1:vars} as $${2:$var}): ?>
		${0}
	<?php endforeach ?>
snippet ?i
	<?php if ($${1:var}): ?>
		${0}
	<?php endif ?>
snippet ns
	namespace ${1:Foo\Bar\Baz};
	${0}
snippet use
	use ${1:Foo\Bar\Baz};
	${0}
snippet	c
	class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
snippet i
	interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
snippet t.
	$this->
snippet f
	function ${1}(${3})
	{
		${0}
	}
# method
snippet m
	${1:protected} function ${2:foo}()
	{
		${0}
	}
# setter method
snippet sm
	/**
	 * Sets the value of ${1:foo}
	 *
	 * @param ${2:$1} $$1 ${3:description}
	 *
	 * @return ${4:`vim_snippets#Filename()`}
	 */
	${5:public} function set${6:$2}(${7:$2 }$$1)
	{
		$this->${8:$1} = $$1;
		return $this;
	}
# getter method
snippet gm
	/**
	 * Gets the value of ${1:foo}
	 *
	 * @return ${2:$1}
	 */
	${3:public} function get${4:$2}()
	{
		return $this->${5:$1};
	}
#setter
snippet $s
	${1:$foo}->set${2:Bar}(${0});
#getter
snippet $g
	${1:$foo}->get${0:Bar}();

# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet =?:
	$${1:foo} = ${2:true} ? ${3:a} : ${0};
snippet ?:
	${1:true} ? ${2:a} : ${0}

snippet C
	$_COOKIE['${1:variable}']
snippet E
	$_ENV['${1:variable}']
snippet F
	$_FILES['${1:variable}']
snippet G
	$_GET['${1:variable}']
snippet P
	$_POST['${1:variable}']
snippet R
	$_REQUEST['${1:variable}']
snippet S
	$_SERVER['${1:variable}']
snippet SS
	$_SESSION['${1:variable}']

# the following are old ones
snippet inc
	include '${1:file}';
snippet inc1
	include_once '${1:file}';
snippet req
	require '${1:file}';
snippet req1
	require_once '${1:file}';
# Start Docblock
snippet /*
	/**
	 * ${0}
	 */
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @subpackage ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 */
# Class Variable
snippet doc_
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 */
	${1:var} $${2};
# Class
snippet doc_c
	/**
	 * ${1:Default.Class.Description.}
	 *
	 * @category ${2:}
	 * @package  ${3:}
	 * @author   ${4:`g:snips_author` <`g:snips_email`>}
	 * @license  ${5:`g:snips_license`}
	 * @link     ${6:`g:snips_link`}
	 *
	 */
	class ${7:ClassName}
	{

	}
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 */
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 */
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3});
# Function
snippet doc_f
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
	${2}function ${2}(${3})
	{
		${7}
	}
snippet doc_pf
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
	public ${2}function ${2}(${3})
	{
		${7}
	}
# Header
snippet doc_h
	/**
	 * ${1:ClassName}
	 *
	 * ${2:`g:snips_php_version`}
	 * 
	 * @category   ${2:ClassName}
	 * @package    ${2:Main}
	 * @subpackage ${3:Child}
	 * @author     ${4:`g:snips_author`}
	 * @copyright  ${5:`g:snips_copyright`}
	 * @license    ${6:`g:snips_license`}
	 * @createTime ${7:`strftime('%Y-%m-%d %H:%M:%S %A')`}
	 * @lastTime   ${8:`strftime('%Y-%m-%d %H:%M:%S %A')`}
	 *
	 * @link       ${9:`g:snips_link`}
	 */

# Interface
snippet interface
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
	interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
# Trait
snippet trait
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
	trait ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
# class ...
snippet class
	/**
	 * ${1}
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		${3}
		/**
		 * ${4}
		 */
		${5:public} function ${6:__construct}(${7:argument})
		{
			${0}
		}
	}
snippet nc
	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	${2:abstract }class ${3:`vim_snippets#Filename()`}
	{
		${0}
	}
# define(...)
snippet define
	define('${1}', '${2}');${3}
snippet def
	define('${1}'${2});
# defined(...)
snippet def?
	${1}defined('${2}')
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# do ... while
snippet do
	do {
		${2:}
	} while (${1:});
snippet if
	if (${1:}) {
		${2:}
	}
snippet ifn
	if (!${1:/* condition */}) {
		${2}
	}
snippet ifil
	<?php if (${1:/* condition */}): ?>
		${0}
	<?php endif; ?>
snippet ife
	if (${1:}) {
		${2:}
	} else {
		${3:}
	}
	${4}
snippet ifeil
	<?php if (${1:/* condition */}): ?>
		${2:<!-- html... -->}
	<?php else: ?>
		${3:<!-- html... -->}
	<?php endif; ?>
	${0}
snippet ifthrow
	if(! ${1:}){
		throw new Exception("");
	}
snippet el
	else {
		${0}
	}
snippet eif
	elseif (${1}) {
		${0}
	}
snippet switch
	switch ($${1:}) {
	case '${2:}':
		${3:}
		break;
		${5:}
	default:
		${4:}
		break;
	}
snippet case
	case '${1:}':
		${2:}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:}
	}
snippet foreach
	foreach ($${1:} as $${2:}) {
		${3:}
	}
snippet foreachv
	foreach ($${1:} as $${2:} => $${3:}) {
		${4:}
	}
snippet function
	function ${1:}(${2:}){
		${3:}
	}
snippet func
	function ${1:}(${2:}){
		${3:}
	}
snippet foreachil
	<?php foreach ($${1:variable} as $${2:value}): ?>
		${0:<!-- html... -->}
	<?php endforeach; ?>
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${0}
	}
snippet foreachkil
	<?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>
		${0:<!-- html... -->}
	<?php endforeach; ?>
# $... = array (...)
snippet array b
	$${1:arrayName} = array('${2}' => ${3});
snippet try
	try {
		${1:}
	} catch ( Exception $e) {
		die(${2:});
	}
# lambda with closure
snippet lambda
	${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
		${0}
	};
# pre_dump();
snippet pd
	echo '<pre>'; var_dump(${0}); echo '</pre>';
# pre_dump(); die();
snippet pdd
	echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${0:});
snippet vd
	var_dump(${0});
snippet vdd
	var_dump(${1}); die(${0:});
snippet pr
	print_r(${0});
snippet prs
	print_r(${0}, 1);
snippet vdf
	error_log(print_r($${1:foo}, true), 3, '${2:/tmp/debug.log}');
snippet http_redirect
	header ("HTTP/1.1 301 Moved Permanently");
	header ("Location: ".URL);
	exit();
# Getters & Setters
snippet gs
	/**
	 * Gets the value of ${1:foo}
	 *
	 * @return ${2:$1}
	 */
	public function get${3:$2}()
	{
		return $this->${4:$1};
	}

	/**
	 * Sets the value of $1
	 *
	 * @param $2 $$1 ${5:description}
	 *
	 * @return ${6:`vim_snippets#Filename()`}
	 */
	public function set$3(${7:$2 }$$1)
	{
		$this->$4 = $$1;
		return $this;
	}
# anotation, get, and set, useful for doctrine
snippet ags
	/**
	 * ${1:description}
	 *
	 * @${0}
	 */
	${2:protected} $${3:foo};

	public function get${4:$3}()
	{
		return $this->$3;
	}

	public function set$4(${5:$4 }$${6:$3})
	{
		$this->$3 = $$6;
		return $this;
	}
snippet rett
	return true;
snippet retf
	return false;
snippet am
	$${1:foo} = array_map(function($${2:v}) {
		${0}
		return $$2;
	}, $$1);
snippet aw
	array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {
		$$2 = ${0};
	});

# static var assign once
snippet static_var
	static $${1} = null;
	if (is_null($$1)){
		$$1 = ${2};
	}

snippet CSVWriter
	<?php
	
	class CSVWriter {
		public function __construct($file_or_handle, $sep = "\t", $quot = '"'){
			$args = func_get_args();
			$mode = isset($opts['mode']) ? $opts['mode'] : 'w';
	
			$this->f =
				is_string($file_or_handle)
				? fopen($file_or_handle, $mode)
				: $file_or_handle;
	
			$this->fputcsv_args = array($this->f, null, $sep, $quot);
	
			if (!$this->f) throw new Exception('bad file descriptor');
		}
	
		public function write($row){
			$this->fputcsv_args[1] =& $row;
			call_user_func_array('fputcsv', $this->fputcsv_args);
		}
	
		public function close(){
			if (!is_null($this->f))
				fclose($this->f);
			$this->f = null;
		}
	
		public function __destruct(){
			$this->close();
		}
	
	}

snippet CSVIterator
	
	// http://snipplr.com/view.php?codeview&id=1986 // modified
	class CSVIterator implements Iterator
	{	
		private $f;
		private $curr;
		private $rowCounter;
	
		 /* opts keys:
			* row_size
			* escape
			* enclosure
			* delimiter
			*/
		public function __construct( $file_or_handle, $opts = array(4096, ',') )
		{
			$d = function($n) use(&$opts){ return isset($opts[$n]) ? $opts[$n] : false; };
	
			$this->combine = $d('combine');
			$this->headers = $d('headers');
			$this->headerCheckFunction = $d('header_check_function');
	
			$this->f =
				is_string($file_or_handle)
				? fopen( $file_or_handle, 'r' )
				: $file_or_handle;
			if (!$this->f) throw new Exception('bad file descriptor');
			$this->fgetcsv_args = array(
					$this->f,
					isset($opts['row_size']) ? $opts['row_size'] : 4096,
					isset($opts['delimiter']) ? $opts['delimiter'] : ',',
					isset($opts['enclosure']) ? $opts['enclosure'] : '"',
					isset($opts['escape']) ? $opts['escape'] : '\\',
			);
			$this->start();
		}
	
		protected function readRow(){
			$this->curr = call_user_func_array('fgetcsv', $this->fgetcsv_args );
			$this->rowCounter++;
			if ($this->rowCounter == 1){
				$this->processHeader();
			} elseif ($this->curr) {
				$this->processRow();
			}
		}
	
		public function processHeader(){
			if ($this->headers || $this->combine){
				$this->header = $this->curr;
				if ($this->headerCheckFunction){
					$f = $this->headerCheckFunction;
					$f($this->header);
				}
				$this->readRow();
			}
		}
	
		public function processRow(){
			if ($this->combine)
				$this->curr = array_combine($this->header, $this->curr);
		}
	
		public function start(){
			$this->rowCounter = 0;
			rewind( $this->f );
			$this->readRow();
		}
	
		public function rewind()
		{
			$this->start();
		}
	
		public function current()
		{
			$curr = $this->curr;
			$this->readRow();
			return $curr;
		}
	
		public function key()
		{
			return $this->rowCounter;
		}
	
		public function next()
		{
			return $this->curr;
		}
	
		public function valid(){
			if( !$this->next() )
			{
				fclose( $this->f );
				return FALSE;
			}
			return TRUE;
		}
	
	} // end class

snippet is
	isset($1{VISUAL})

# phpunit	
snippet ase
	$this->assertEquals(${1:expected}, ${2:actual});

snippet asne
	$this->assertNotEquals(${1:expected}, ${2:actual});

snippet asf
	$this->assertFalse(${1:Something});

snippet ast
	$this->assertTrue(${1:Something});

snippet asfex
	$this->assertFileExists(${1:path/to/file});

snippet asfnex
	$this->assertFileNotExists(${1:path/to/file});

snippet ascon
	$this->assertContains(${1:Search Value}, ${2:Array or Iterator});

snippet ashk
	$this->assertArrayHasKey(${1:key}, ${2:array});

snippet asnhk
	this->assertArrayNotHasKey(${1:value}, ${2:array});

snippet ascha
	$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');

snippet asi
	$this->assertInstanceOf(${1:expected}, ${2:actual});

snippet tc
	public function test${1:name_of_the_test}()
	{
		${0:code}
	}
snippet te 
	throw new ${1:Exception}("${2:Error Processing Request}");

snippet fpc "file_put_contents" b
	file_put_contents(${1:file}, ${2:content}${3:, FILE_APPEND});$0

snippet sr "str_replace"
	str_replace(${1:search}, ${2:replace}, ${3:subject})$0

snippet ia "in_array"
	in_array(${1:needle}, ${2:haystack})$0

snippet is "isset"
	isset(${1:var})$0

snippet isa "isset array"
	isset($${1:array}[${2:key}])$0

snippet in "is_null"
	is_null($${1:var})$0

snippet fe "file_exists"
	file_exists(${1:file})$0

snippet id "is_dir"
	is_dir(${1:path})$0


### selfdefine
snippet php
	<?php
	${1}
snippet phpw
	<?php ${1}?>
snippet echo
	echo ${1:string}${2};
snippet echop
	echo '<pre>';
	 ${1:}
	echo '</pre>';
snippet echopvd
	echo '<pre>';
	var_dump(${1:});
	echo '</pre>';
snippet echoppr
	echo '<pre>';
	print_r (${1:});
	echo '</pre>';
snippet echopprex
	echo '<pre>';
	print_r (${1:});
	echo '</pre>';exit;
snippet echopvdex
	echo '<pre>';
	var_dump(${1:});
	echo '</pre>';exit;
snippet echopvdaex
	echo '<pre>';
	var_dump(array('${1:}' => ));
	echo '</pre>';exit;
snippet echopvpex
	echo '<pre>';
	var_export(array('${1:}' => ), 1);
	echo '</pre>';exit;
snippet elvp
	error_log(var_export(array('${1:}' => ${2}), 1)."\n", 3, "/var/log/php_errors.log");
snippet elvp1
	error_log("#${1:}#"."\n", 3, "/var/log/php_errors.log");
snippet elvpt
	error_log("#".date('Y-m-d H:i:s')."#"."\n", 3, "/var/log/php_errors.log");
	error_log(var_export(array('${1:}' => ${2}), 1)."\n", 3, "/var/log/php_errors.log");
snippet echoh
	echo ${1:string}.'<hr />';
snippet echob
	echo ${1:string}.'<br />';
snippet echo1b
	echo '##111##'.'<br />';
snippet echo2b
	echo '##222##'.'<br />';
snippet echo3b
	echo '##333##'.'<br />';
snippet echo4b
	echo '##444##'.'<br />';
snippet echoex
	echo ${1:string}${2};exit;
snippet $
	$${1:string} = "${2:}";
snippet print
	print (${1:string});
snippet printr
	print_r (${1:string});
snippet vd
	var_dump(${1:});
snippet vdx
	var_dump(${1:});exit;
snippet vda
	var_dump(array('' => ));
snippet include
	include ${1:file};${2}
snippet include1
	include_once ${1:file};${2}
snippet require
	require ${1:file};${2}
snippet require1
	require_once ${1:file};${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet cookie
	$_COOKIE['${1:variable}']${2}
snippet env
	$_ENV['${1:variable}']${2}
snippet files
	$_FILES['${1:variable}']${2}
snippet get
	$_GET['${1:variable}']${2}
snippet post
	$_POST['${1:variable}']${2}
snippet request
	$_REQUEST['${1:variable}']${2}
snippet server
	$_SERVER['${1:variable}']${2}
snippet session
	$_SESSION['${1:variable}']${2}
snippet exit
	exit(${1:string});
snippet thrownew
	throw new ${1}
snippet thrownewi
	throw new InvalidArgumentException(${1});
snippet invalid
	InvalidArgumentException
snippet publicft
	public function testException(){

	}

snippet tryif
	try{
		${1}
	}

	catch (InvalidArgumentException $expected) {
		return;${2}
	}

	$this->fail('${3}');
snippet ex
	exception
snippet thissee
	$this->setExpectedException('${1}');
snippet publicftf
	public function testFailingInclude(){
		include '${1}';
	}
snippet extends
	class ${1:Child} extends ${2:}
	{
		${3:}
	}
snippet clone
	clone $${1:};
snippet static
	static $${1:};
snippet const
	const ${1:};
snippet public
	public $${1:};
snippet private
	private $${1:};
snippet protected
	protected $${1:};
snippet staticpub
	public static $${1:};
snippet staticpri
	private static $${1:};
snippet staticpro
	protect static $${1:};
snippet staticf
	static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticpubf
	public static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticprif
	private static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticprof
	protected static function ${1:}(${2:})
	{
		${3:}
	}
snippet publicf
	public function ${1:}(${2:})
	{
		${3:}
	}
snippet privatef
	private function ${1:}(${2:})
	{
		${3:}
	}
snippet protectedf
	protected function ${1:}(${2:})
	{
		${3:}
	}
snippet constructf
	function __construct(${1:})
	{
		${2:}
	}
snippet destructf
	function __destruct(${1:})
	{
		${2:}
	}
snippet clonef
	function __clone(${1:})
	{
		${2:}
	}
snippet getf
	function __get($${1:})
	{
		${2:}
	}
snippet issetf
	function __isset(${1:})
	{
		${2:}
	}
snippet setf
	function __set($${1:name},$${2:value})
	{
		${3:}
	}
snippet unsetf
	function __unset($${1:name})
	{
		${2:}
	}
snippet callf
	function __call($${1:method_name},$${2:parameters})
	{
		${3:}
	}
snippet sleepf
	function __sleep()
	{
		${1:}
		return ${2:}
	}
snippet wakeupf
	function __wakeup()
	{
		${1:}
	}
snippet tostringf
	function __toString()
	{
		${1:}
	}
snippet autoloadf
	function __autoload(${1:class_name})
	{
		${1:}
	}
snippet parent
	parent::${1:}(${2:});
snippet self
	self::${1:}(${2:});
snippet abstract
	abstract class ${1:}{
		abstract function ${2:abstract_method}(${3:}){
			${4:}
		}
	}
snippet finalf
	final function ${1:}
	{
		${2:}
	}
snippet finalc
	final class ${1:}
	{
		${2:}
	}
snippet implements
	class ${1:} implements ${2:}
	{
		${2:}
	}
snippet new
	$${1:} = new ${2:}();
snippet else
	else {
		${1:}
	}
snippet elseif
	elseif (${1:}) {
		${2:}
	}
# $... = array (...)
snippet array
	$${1:} = array('${2}' => ${3});${4}
snippet this
	$this->${1:}
# phpunit
snippet ase
	$this->assertEquals(${1:expected}, ${2:actual});

snippet asne
	$this->assertNotEquals(${1:expected}, ${2:actual});

snippet asf
	$this->assertFalse(${1:Something});

snippet ast
	$this->assertTrue(${1:Something});

snippet asfex
	$this->assertFileExists(${1:path/to/file});

snippet asfnex
	$this->assertFileNotExists(${1:path/to/file});

snippet ascon
	$this->assertContains(${1:Search Value}, ${2:Array or Iterator});

snippet ashk
	$this->assertArrayHasKey(${1:key}, ${2:array});

snippet asnhk
	this->assertArrayNotHasKey(${1:value}, ${2:array});

snippet ascha
	$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');

snippet asi
	$this->assertInstanceOf(${1:expected}, ${2:actual});

snippet tc
	public function test${1:name_of_the_test}()
	{
		${0:code}
	}
snippet te 
	throw new ${1:Exception}("${2:Error Processing Request}");

snippet fpc "file_put_contents" b
	file_put_contents(${1:file}, ${2:content}${3:, FILE_APPEND});$0

snippet sr "str_replace"
	str_replace(${1:search}, ${2:replace}, ${3:subject})$0

snippet ia "in_array"
	in_array(${1:needle}, ${2:haystack})$0

snippet is "isset"
	isset(${1:var})$0

snippet isa "isset array"
	isset($${1:array}[${2:key}])$0

snippet in "is_null"
	is_null($${1:var})$0

snippet fe "file_exists"
	file_exists(${1:file})$0

snippet id "is_dir"
	is_dir(${1:path})$0
#### html
snippet nbs
	&nbsp;${1:}
snippet nbs2
	&nbsp;&nbsp;${1:}
snippet nbs3
	&nbsp;&nbsp;&nbsp;${1:}
snippet left
	&#x2190;
# →
snippet right
	&#x2192;
# ↑
snippet up
	&#x2191;
# ↓
snippet down
	&#x2193;
# ↩
snippet return
	&#x21A9;
# ⇤
snippet backtab
	&#x21E4;
# ⇥
snippet tab
	&#x21E5;
# ⇧
snippet shift
	&#x21E7;
# ⌃
snippet ctrl
	&#x2303;
# ⌅
snippet enter
	&#x2305;
# ⌘
snippet cmd
	&#x2318;
# ⌥
snippet option
	&#x2325;
# ⌦
snippet delete
	&#x2326;
# ⌫
snippet backspace
	&#x232B;
# ⎋
snippet esc
	&#x238B;
# comment
snippet //
	<!-- ${1} -->${0}
# Generic Doctype
snippet doctype HTML 4.01 Strict
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
	"http://www.w3.org/TR/html4/strict.dtd">
snippet doctype HTML 4.01 Transitional
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
snippet doctype HTML 5
	<!DOCTYPE HTML>
snippet doctype XHTML 1.0 Frameset
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
snippet doctype XHTML 1.0 Strict
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
snippet doctype XHTML 1.0 Transitional
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
snippet doctype XHTML 1.1
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
# HTML Doctype 4.01 Strict
snippet docts
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
	"http://www.w3.org/TR/html4/strict.dtd">
# HTML Doctype 4.01 Transitional
snippet doct
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
# HTML Doctype 5
snippet doct5
	<!DOCTYPE HTML>
# XHTML Doctype 1.0 Frameset
snippet docxf
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
# XHTML Doctype 1.0 Strict
snippet docxs
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
# XHTML Doctype 1.0 Transitional
snippet docxt
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
# XHTML Doctype 1.1
snippet docx
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
# Attributes
snippet attr
	${1:attribute}="${0:property}"
snippet attr+
	${1:attribute}="${2:property}" attr+
snippet .
	class="${1}"
snippet #
	id="${1}"
snippet alt
	alt="${1}"
snippet charset
	charset="${1:utf-8}"
snippet data
	data-${1}="${2:$1}"
snippet for
	for="${1}"
snippet height
	height="${1}"
snippet href
	href="${1:#}"
snippet lang
	lang="${1:en}"
snippet media
	media="${1}"
snippet name
	name="${1}"
snippet rel
	rel="${1}"
snippet scope
	scope="${1:row}"
snippet src
	src="${1}"
snippet title=
	title="${1}"
snippet type
	type="${1}"
snippet value
	value="${1}"
snippet width
	width="${1}"
# Elements
snippet a
	<a href="${1:#}">${0:$1}</a>
snippet a.
	<a class="${1}" href="${2:#}">${0:$1}</a>
snippet a#
	<a id="${1}" href="${2:#}">${0:$1}</a>
snippet a:ext
	<a href="http://${1:example.com}">${0:$1}</a>
snippet a:mail
	<a href="mailto:${1:joe@example.com}?subject=${2:feedback}">${0:email me}</a>
snippet ac
	<a href="`@+`">${0:`@+`}</a>
snippet abbr
	<abbr title="${1}">${0}</abbr>
snippet address
	<address>
		${0}
	</address>
snippet area
	<area shape="${1:rect}" coords="${2}" href="${3}" alt="${0}">
snippet area+
	<area shape="${1:rect}" coords="${2}" href="${3}" alt="${4}">
	area+
snippet area:c
	<area shape="circle" coords="${1}" href="${2}" alt="${0}">
snippet area:d
	<area shape="default" coords="${1}" href="${2}" alt="${0}">
snippet area:p
	<area shape="poly" coords="${1}" href="${2}" alt="${0}">
snippet area:r
	<area shape="rect" coords="${1}" href="${2}" alt="${0}">
snippet article
	<article>
		${0}
	</article>
snippet article.
	<article class="${1}">
		${0}
	</article>
snippet article#
	<article id="${1}">
		${0}
	</article>
snippet aside
	<aside>
		${0}
	</aside>
snippet aside.
	<aside class="${1}">
		${0}
	</aside>
snippet aside#
	<aside id="${1}">
		${0}
	</aside>
snippet audio
	<audio src="${1}>${0}</audio>
snippet b
	<b>${0}</b>
snippet base
	<base href="${1}" target="${0}">
snippet bdi
	<bdi>${0}</bdo>
snippet bdo
	<bdo dir="${1}">${0}</bdo>
snippet bdo:l
	<bdo dir="ltr">${0}</bdo>
snippet bdo:r
	<bdo dir="rtl">${0}</bdo>
snippet blockquote
	<blockquote>
		${0}
	</blockquote>
snippet body
	<body>
		${0}
	</body>
snippet br
	<br>
snippet button
	<button type="${1:submit}">${0}</button>
snippet button.
	<button class="${1:button}" type="${2:submit}">${0}</button>
snippet button#
	<button id="${1}" type="${2:submit}">${0}</button>
snippet button:s
	<button type="submit">${0}</button>
snippet button:r
	<button type="reset">${0}</button>
snippet canvas
	<canvas>
		${0}
	</canvas>
snippet caption
	<caption>${0}</caption>
snippet cite
	<cite>${0}</cite>
snippet code
	<code>${0}</code>
snippet col
	<col>
snippet col+
	<col>
	col+
snippet colgroup
	<colgroup>
		${0}
	</colgroup>
snippet colgroup+
	<colgroup>
		<col />
		col+${0}
	</colgroup>
snippet command
	<command type="command" label="${1}" icon="${0}">
snippet command:c
	<command type="checkbox" label="${1}" icon="${0}">
snippet command:r
	<command type="radio" radiogroup="${1}" label="${2}" icon="${0}">
snippet datagrid
	<datagrid>
		${0}
	</datagrid>
snippet datalist
	<datalist>
		${0}
	</datalist>
snippet datatemplate
	<datatemplate>
		${0}
	</datatemplate>
snippet dd
	<dd>${0}</dd>
snippet dd.
	<dd class="${1}">${0}</dd>
snippet dd#
	<dd id="${1}">${0}</dd>
snippet del
	<del>${0}</del>
snippet details
	<details>${0}</details>
snippet dfn
	<dfn>${0}</dfn>
snippet dialog
	<dialog>
		${0}
	</dialog>
snippet div
	<div>
		${0}
	</div>
snippet div.
	<div class="${1}">
		${0}
	</div>
snippet div#
	<div id="${1}">
		${0}
	</div>
snippet dl
	<dl>
		${0}
	</dl>
snippet dl.
	<dl class="${1}">
		${0}
	</dl>
snippet dl#
	<dl id="${1}">
		${0}
	</dl>
snippet dl+
	<dl>
		<dt>${1}</dt>
		<dd>${2}</dd>
		dt+${0}
	</dl>
snippet dt
	<dt>${0}</dt>
snippet dt.
	<dt class="${1}">${0}</dt>
snippet dt#
	<dt id="${1}">${0}</dt>
snippet dt+
	<dt>${1}</dt>
	<dd>${2}</dd>
	dt+${0}
snippet em
	<em>${0}</em>
snippet embed
	<embed src="${1}" type="${0}">
snippet fieldset
	<fieldset>
		${0}
	</fieldset>
snippet fieldset.
	<fieldset class="${1}">
		${0}
	</fieldset>
snippet fieldset#
	<fieldset id="${1}">
		${0}
	</fieldset>
snippet fieldset+
	<fieldset>
		<legend><span>${1}</span></legend>
		${2}
	</fieldset>
	fieldset+${0}
snippet figcaption
	<figcaption>${0}</figcaption>
snippet figure
	<figure>${0}</figure>
snippet figure#
	<figure id="${1}">
		${0}
	</figure>
snippet figure.
	<figure class="${1}">
		${0}
	</figure>
snippet footer
	<footer>
		${0}
	</footer>
snippet footer.
	<footer class="${1}">
		${0}
	</footer>
snippet footer#
	<footer id="${1}">
		${0}
	</footer>
snippet form
	<form action="${1}" method="${2:post}" accept-charset="utf-8">
		${0}
	</form>
snippet form.
	<form class="${1}" action="${2}" method="${3:post}" accept-charset="utf-8">
		${0}
	</form>
snippet form#
	<form id="${1}" action="${2}" method="${3:post}" accept-charset="utf-8">
		${0}
	</form>
snippet h1
	<h1>${0}</h1>
snippet h1.
	<h1 class="${1}">${0}</h1>
snippet h1#
	<h1 id="${1}">${0}</h1>
snippet h2
	<h2>${0}</h2>
snippet h2.
	<h2 class="${1}">${0}</h2>
snippet h2#
	<h2 id="${1}">${0}</h2>
snippet h3
	<h3>${0}</h3>
snippet h3.
	<h3 class="${1}">${0}</h3>
snippet h3#
	<h3 id="${1}">${0}</h3>
snippet h4
	<h4>${0}</h4>
snippet h4.
	<h4 class="${1}">${0}</h4>
snippet h4#
	<h4 id="${1}">${0}</h4>
snippet h5
	<h5>${0}</h5>
snippet h5.
	<h5 class="${1}">${0}</h5>
snippet h5#
	<h5 id="${1}">${0}</h5>
snippet h6
	<h6>${0}</h6>
snippet h6.
	<h6 class="${1}">${0}</h6>
snippet h6#
	<h6 id="${1}">${0}</h6>
snippet head
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8">

		<title>${1:`substitute(vim_snippets#Filename('', 'Page Title'), '^.', '\u&', '')`}</title>
		${0}
	</head>
snippet header
	<header>
		${0}
	</header>
snippet header.
	<header class="${1}">
		${0}
	</header>
snippet header#
	<header id="${1}">
		${0}
	</header>
snippet hgroup
	<hgroup>
		${0}
	</hgroup>
snippet hgroup.
	<hgroup class="${1}>
		${0}
	</hgroup>
snippet hr
	<hr>
snippet html
	<html>
	${0}
	</html>
snippet xhtml
	<html xmlns="http://www.w3.org/1999/xhtml">
	${0}
	</html>
snippet html5
	<!DOCTYPE html>
	<html>
		<head>
			<meta charset="utf-8">
			<meta name="viewport" content="width=device-width">
			<title>${1:`substitute(vim_snippets#Filename('', 'Page Title'), '^.', '\u&', '')`}</title>
			${2:link}
		</head>
		<body>
			${0:body}
		</body>
	</html>
snippet html5l
	<!DOCTYPE html>
	<html lang="${1:es}">
		<head>
			<meta charset="utf-8">
			<meta name="viewport" content="width=device-width">
			<title>${2:`substitute(vim_snippets#Filename('', 'Page Title'), '^.', '\u&', '')`}</title>
			${3:link}
		</head>
		<body>
			${0:body}
		</body>
	</html>
snippet i
	<i>${0}</i>
snippet iframe
	<iframe src="${1}" frameborder="0"></iframe>
snippet iframe.
	<iframe class="${1}" src="${2}" frameborder="0"></iframe>
snippet iframe#
	<iframe id="${1}" src="${2}" frameborder="0"></iframe>
snippet img
	<img src="${1}" alt="${2}">
snippet img.
	<img class="${1}" src="${2}" alt="${3}">
snippet img#
	<img id="${1}" src="${2}" alt="${3}">
snippet input
	<input type="${1:text/submit/hidden/button/image}" name="${2}" id="${3:$2}" value="${4}">
snippet input.
	<input class="${1}" type="${2:text/submit/hidden/button/image}" name="${3}" id="${4:$3}" value="${5}">
snippet input:text
	<input type="text" name="${1}" id="${2:$1}" value="${3}">
snippet input:submit
	<input type="submit" name="${1}" id="${2:$1}" value="${3}">
snippet input:hidden
	<input type="hidden" name="${1}" id="${2:$1}" value="${3}">
snippet input:button
	<input type="button" name="${1}" id="${2:$1}" value="${3}">
snippet input:image
	<input type="image" name="${1}" id="${2:$1}" src="${3}" alt="${4}">
snippet input:checkbox
	<input type="checkbox" name="${1}" id="${2:$1}">
snippet input:radio
	<input type="radio" name="${1}" id="${2:$1}">
snippet input:color
	<input type="color" name="${1}" id="${2:$1}" value="${3}">
snippet input:date
	<input type="date" name="${1}" id="${2:$1}" value="${3}">
snippet input:datetime
	<input type="datetime" name="${1}" id="${2:$1}" value="${3}">
snippet input:datetime-local
	<input type="datetime-local" name="${1}" id="${2:$1}" value="${3}">
snippet input:email
	<input type="email" name="${1}" id="${2:$1}" value="${3}">
snippet input:file
	<input type="file" name="${1}" id="${2:$1}" value="${3}">
snippet input:month
	<input type="month" name="${1}" id="${2:$1}" value="${3}">
snippet input:number
	<input type="number" name="${1}" id="${2:$1}" value="${3}">
snippet input:password
	<input type="password" name="${1}" id="${2:$1}" value="${3}">
snippet input:range
	<input type="range" name="${1}" id="${2:$1}" value="${3}">
snippet input:reset
	<input type="reset" name="${1}" id="${2:$1}" value="${3}">
snippet input:search
	<input type="search" name="${1}" id="${2:$1}" value="${3}">
snippet input:time
	<input type="time" name="${1}" id="${2:$1}" value="${3}">
snippet input:url
	<input type="url" name="${1}" id="${2:$1}" value="${3}">
snippet input:week
	<input type="week" name="${1}" id="${2:$1}" value="${3}">
snippet ins
	<ins>${0}</ins>
snippet kbd
	<kbd>${0}</kbd>
snippet keygen
	<keygen>${0}</keygen>
snippet label
	<label for="${0:$1}">${1}</label>
snippet label:i
	<label for="${2:$1}">${1}</label>
	<input type="${3:text/submit/hidden/button}" name="${4:$2}" id="${5:$2}" value="${6}" />
snippet label:s
	<label for="${2:$1}">${1}</label>
	<select name="${3:$2}" id="${4:$2}">
		<option value="${5}">${0:$5}</option>
	</select>
snippet legend
	<legend>${0}</legend>
snippet legend+
	<legend><span>${0}</span></legend>
snippet li
	<li>${0}</li>
snippet li.
	<li class="${1}">${0}</li>
snippet li+
	<li>${1}</li>
	li+
snippet lia
	<li><a href="${0:#}">${1}</a></li>
snippet lia+
	<li><a href="${2:#}">${1}</a></li>
	lia+
snippet link
	<link rel="${1}" href="${2}" title="${3}" type="${4}">
snippet link:atom
	<link rel="alternate" href="${1:atom.xml}" title="Atom" type="application/atom+xml">
snippet link:s
	<link rel="stylesheet" href="${1:style.css}">
snippet link:css
	<link rel="stylesheet" href="${1:style.css}" type="text/css" media="${2:all}">
snippet link:favicon
	<link rel="shortcut icon" href="${1:favicon.ico}" type="image/x-icon">
snippet link:rss
	<link rel="alternate" href="${1:rss.xml}" title="RSS" type="application/atom+xml">
snippet link:touch
	<link rel="apple-touch-icon" href="${1:favicon.png}">
snippet main
	<main role="main">
		${0}
	</main>
snippet map
	<map name="${1}">
		${0}
	</map>
snippet map.
	<map class="${1}" name="${2}">
		${0}
	</map>
snippet map#
	<map name="${1}" id="${2:$1}>
		${0}
	</map>
snippet map+
	<map name="${1}">
		<area shape="${2}" coords="${3}" href="${4}" alt="${5}">${6}
	</map>
snippet mark
	<mark>${0}</mark>
snippet menu
	<menu>
		${0}
	</menu>
snippet menu:c
	<menu type="context">
		${0}
	</menu>
snippet menu:t
	<menu type="toolbar">
		${0}
	</menu>
snippet meta
	<meta http-equiv="${1}" content="${2}">
snippet meta:s
	<meta ${0}>
snippet meta:d
	<meta name="description" content="${0}">
snippet meta:compat
	<meta http-equiv="X-UA-Compatible" content="IE=${1:7,8,edge}">
snippet meta:refresh
	<meta http-equiv="refresh" content="text/html;charset=UTF-8">
snippet meta:utf
	<meta http-equiv="content-type" content="text/html;charset=UTF-8">
snippet meter
	<meter>${0}</meter>
snippet nav
	<nav>
		${0}
	</nav>
snippet nav.
	<nav class="${1}">
		${0}
	</nav>
snippet nav#
	<nav id="${1}">
		${0}
	</nav>
snippet noscript
	<noscript>
		${0}
	</noscript>
snippet object
	<object data="${1}" type="${2}">
		${3}
	</object>
# Embed QT Movie
snippet movie
	<object width="$2" height="$3" classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B"
	codebase="http://www.apple.com/qtactivex/qtplugin.cab">
		<param name="src" value="$1" />
		<param name="controller" value="$4">
		<param name="autoplay" value="$5">
		<embed src="${1:movie.mov}"
			width="${2:320}" height="${3:240}"
			controller="${4:true}" autoplay="${5:true}"
			scale="tofit" cache="true"
			pluginspage="http://www.apple.com/quicktime/download/">
	</object>
snippet ol
	<ol>
		${0}
	</ol>
snippet ol.
	<ol class="${1}">
		${0}
	</ol>
snippet ol#
	<ol id="${1}">
		${0}
	</ol>
snippet ol+
	<ol>
		<li>${1}</li>
		li+${0}
	</ol>
snippet opt
	<option value="${1}">${0:$1}</option>
snippet opt+
	<option value="${1}">${2:$1}</option>
	opt+${0}
snippet optt
	<option>${0}</option>
snippet optgroup
	<optgroup>
		<option value="${1}">${2:$1}</option>
		opt+${0}
	</optgroup>
snippet output
	<output>${0}</output>
snippet p
	<p>${0}</p>
snippet p.
	<p class="${1}">${0}</p>
snippet p#
	<p id="${1}">${0}</p>
snippet param
	<param name="${1}" value="${2}">
snippet pre
	<pre>
		${0}
	</pre>
snippet progress
	<progress>${0}</progress>
snippet q
	<q>${0}</q>
snippet rp
	<rp>${0}</rp>
snippet rt
	<rt>${0}</rt>
snippet ruby
	<ruby>
		<rp><rt>${0}</rt></rp>
	</ruby>
snippet s
	<s>${0}</s>
snippet samp
	<samp>
		${0}
	</samp>
snippet script
	<script type="text/javascript" charset="utf-8">
		${0}
	</script>
snippet scripts
	<script src="${0}.js"></script>
snippet scriptt
	<script type="${1}" id="${2}">
		${0}
	</script>
snippet scriptsrc
	<script src="${0}.js" type="text/javascript" charset="utf-8"></script>
snippet section
	<section>
		${0}
	</section>
snippet section.
	<section class="${1}">
		${0}
	</section>
snippet section#
	<section id="${1}">
		${0}
	</section>
snippet select
	<select name="${1}" id="${2:$1}">
		${0}
	</select>
snippet select.
	<select name="${1}" id="${2:$1}" class="${3}>
		${0}
	</select>
snippet select+
	<select name="${1}" id="${2:$1}">
		<option value="${3}">${4:$3}</option>
		opt+${0}
	</select>
snippet small
	<small>${0}</small>
snippet source
	<source src="${1}" type="${2}" media="${0}">
snippet span
	<span>${0}</span>
snippet span.
	<span class="${1}">${0}</span>
snippet span#
	<span id="${1}">${0}</span>
snippet strong
	<strong>${0}</strong>
snippet style
	<style type="text/css" media="${1:all}">
		${0}
	</style>
snippet sub
	<sub>${0}</sub>
snippet summary
	<summary>
		${0}
	</summary>
snippet sup
	<sup>${0}</sup>
snippet table
	<table>
		${0}
	</table>
snippet table.
	<table class="${1}">
		${0}
	</table>
snippet table#
	<table id="${1}">
		${0}
	</table>
snippet tbody
	<tbody>
		${0}
	</tbody>
snippet td
	<td>${0}</td>
snippet td.
	<td class="${1}">${0}</td>
snippet td#
	<td id="${1}">${0}</td>
snippet td+
	<td>${1}</td>
	td+${0}
snippet textarea
	<textarea name="${1}" id="${2:$1}" rows="${3:8}" cols="${4:40}">${5}</textarea>
snippet tfoot
	<tfoot>
		${0}
	</tfoot>
snippet th
	<th>${0}</th>
snippet th.
	<th class="${1}">${0}</th>
snippet th#
	<th id="${1}">${0}</th>
snippet th+
	<th>${1}</th>
	th+${0}
snippet thead
	<thead>
		${0}
	</thead>
snippet time
	<time datetime="${1}" pubdate="${2:$1}">${0:$1}</time>
snippet title
	<title>${0:`substitute(vim_snippets#Filename('', 'Page Title'), '^.', '\u&', '')`}</title>
snippet tr
	<tr>
		${0}
	</tr>
snippet tr+
	<tr>
		<td>${1}</td>
		td+${0}
	</tr>
snippet track
	<track src="${1}" srclang="${2}" label="${3}" default="${4:default}>${5}</track>
snippet ul
	<ul>
		${0}
	</ul>
snippet ul.
	<ul class="${1}">
		${0}
	</ul>
snippet ul#
	<ul id="${1}">
		${0}
	</ul>
snippet ul+
	<ul>
		<li>${1}</li>
		li+${0}
	</ul>
snippet var
	<var>${0}</var>
snippet video
	<video src="${1} height="${2}" width="${3}" preload="${5:none}" autoplay="${6:autoplay}>${7}</video>
snippet wbr
	<wbr>
# smarty
snippet <
	<%{ ${1:} }%>
snippet $s
	$Smarty -> ${1:}(${2:});
#### javascript
snippet jsproto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
snippet jsalert
	alert(${1:});
snippet jsfunc1
	function ${1:function_name} (${2:}) {
		${3:}
	}
snippet jsfunc2
	function(${1}) {${2}};
snippet jsif
	if (${1:true}) {${2}};
snippet jsifelse
	if (${1:true}) {${2}}
	else{${3}};
snippet jst
	${1:/* condition */} ? ${2:a} : ${3:b}
snippet jsswitch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
snippet jscase
	case '${1:case}':
		${2:// code}
		break;
	${3}
snippet jsfor1
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
snippet jsfor2
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
snippet jswhile
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet jsdo
	do {
		${2:/* code */}
	} while (${1:/* condition */});
snippet jstimeout
	setTimeout(function() {${3}}${2}, ${1:10};
snippet jqvar
	var $${1:name} = $("${2:}");
snippet jsvar
	var ${1:name} = ${2:};
snippet jsgetbi
	document.getElementById("${1:}")
snippet jsgetbt
	document.getElementsByTagName("${1}")
snippet jsgetbc
	document.getElementsByClassName("${1:}")
snippet jsgeta
	getAttribute("${1:}")
snippet jsseta
	setAttribute("${1:}")
snippet jsfor
	for ( var i=0; i < ${1:length}; i++){
		${2:}
	}
snippet jscreatee
	document.createElement("${1:}")
snippet jsaddLoadEvent
	function addLoadEvent(func){
		var oldonload = window.onload;
		if(typeof window.onload != 'function'){
			window.onload = func;
		}else{
			window.onload = function(){
				oldonload();
				func();
			}
		}
	}
snippet jsinsertAfter
	function insertAfter(newElement,targetElement){
		var parent = targetElement.parentNode;
		if(parent.lastChild == targetElement){
			parent.appendChild(newElement);
		}else{
			parent.insertBefore(newElement,targetElement.nextSibling);
		}
	}
snippet jsonload
	windows.onload = function(){
		${1:}
	}
snippet jsappendc
	appendChild(${1:})
snippet jscreatet
	document.createTextNode(${1:})
snippet jsinsertb
	insertBefore(${1:});
# json
snippet jsonget
	document.getElementById("${1:}").innerHTML=JSONObject.${2:}
#html5
snippet html5
	<!DOCTYPE HTML>
	<html>
	<body>
	${1:others}
	/body>
	</html>
	snippet video5
	<video width="${1:name}" height="${2:name}" controls="${3:controls/autoplay/loop/preload}">
		<source src="${3:name}" type="video/ogg">
		Your browser does not support the video tag.
	</video>
snippet audio5
	<audio src="${1:ogg/mp3/wav}" controls="${2:controls/autoplay/loop/preload}">
	</audio>
snippet source5
	<source src="${1:name}" type="${2:audio/video}/${3:ogg/mp4/webm/ogg/mpeg/wav}">
snippet canvas5
	<canvas id="${1:name}" width="${2:}" height="${3:}"></canvas>
	<script type="text/javascript">
	var canvas=document.getElementById('${1:name}');
	</script>
#xml
snippet xml
	<?xml version="1.0" encoding="UTF-8"?>
snippet is
	isset($1{VISUAL})
#mend detail
# 3.8.5 add jsfor                           2012-09-18 17:30:30
# 3.8.6 add jsaddLoadEvent,addAppend        2012-09-19 14:06:52
# 3.8.7 change printf to print_r ,delete '' 2012-09-29 10:07:17
# 3.9.1 add some js shortcut                2012-10-18 11:11:23
# 3.9.2 add echop                           2012-10-26 10:12:35
# 3.9.3 change switch space                 2012-12-07 13:59:41
# 3.9.4 add echoh echob                     2013-03-12 10:58:17
# 4.0.1 add echopvd echoppr                 2013-04-17 13:57:20
# 4.0.2 fix define                          2013-05-03 16:09:56
# 6.0.1 add nbs2 nbs3                       2013-06-06 15:00:28
# 6.0.2 add exit                            2013-06-24 14:48:28
# 7.0.1 add vdx,echoex,echopvdex            2013-07-18 15:32:22
#10.0.1 fix some php format                 2013-10-22 18:14:48
#10.0.2 fix some php format,add staticp*f   2013-10-23 10:52:57
#10.0.3 add phpu                            2013-10-24 16:33:26
#11.0.1 change php format                   2013-11-01 14:56:23
#11.0.2,3 change static at the end          2013-11-01 17:49:45
#11.0.4 add issetf                          2013-11-06 11:48:37
#11.0.5 fix try add space                   2013-11-07 18:13:24
#12.0.1 add echo1b echo2b ...               2013-12-19 10:30:43
#13.0.1 add echopvpex,elvp1,elvp,echopvdaex 2014-01-26 13:54:37
#13.0.2 add vda                             2014-01-26 14:19:51
#13.0.3 add echopprex                       2014-01-27 13:52:26
#14.7.1 add doc_pf                          2014-07-02 11:04:10
#14.8.1 add doc_                            2014-08-12 13:38:56
#15.1.1 add foreachv                        2015-01-09 09:55:26
#15.1.2 add new class/doc_h                 2015-01-29 13:39:27
#16.1.1 add new php                         2016-04-20 13:17:34
